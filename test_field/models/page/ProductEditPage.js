let Page = require('../../framework/models/Page.js')

class ProductEditPage extends Page {

  get elements() {

    return {
      'id': this.by.css('form#product_form'),
      'info tab': this.by.linkText('Info'),
      'publish toggle': this.by.css('.product-publish-toggle'),
      'quantity and pricing tab': this.by.linkText('Quantity & Pricing'),
      'subscription toggle': this.by.css('div[data-field-name="Subscription Enabled"] div[ng-model="product.subscription_enabled"]'),
      'product subscription enabled': this.by.css('div[data-field-name="Subscription Enabled"] div[ng-model="product.subscription_enabled"][aria-checked="true"]'),
      'product subscription disabled': this.by.css('div[data-field-name="Subscription Enabled"] div[ng-model="product.subscription_enabled"][aria-checked="false"]'),
      'variations tab': this.by.linkText('Variations'),
      'add-on items tab': this.by.linkText('Add-on items'),
      'SEO tab': this.by.linkText('Search Engine Optimization'),
      'settings tab': this.by.xpath('//*[@id="product_form"]/div[1]/div[3]/ul/li[8]/a'),
      'tab': this.by.css('li.ng-scope'),
      'popup': this.by.css('.modal-dialog'),
      'popup save button': this.by.css('[ng-click="save()"]'),
      'error msg': this.by.css('.text-danger:not(.ng-hide)'),
      //Info
      'english name field': this.by.css('input[name="product_name_en"]'),
      'add photo button': this.by.xpath('//*[@id="productForm-images"]/div/div[2]/div[4]/div[1]/div/button'),
      'product photo field': this.by.css('input#main_media[type="file"]'),
      'additional product photo collapse': this.by.css('[ng-click="isSectionCollapsed.detail_media = !isSectionCollapsed.detail_media"]'),
      'japanese field': this.by.css('input[name="product_name_ja"]'),
      'description field': this.by.css('div[id="product_description"]'),
      //quantity and pricing
      'related product collapse': this.by.css('button[ng-click*="related_products"]'),
      'related product custom button': this.by.css('[ng-click="showProductPicker()"]'),
      'related product add button': this.by.css('[ng-click="addProduct(product,$index)"]'),
      //pricing
      'hide price toggle': this.by.css('div[ng-model="product.hide_price"]'),
      'quantity area': this.by.css('[ng-hide="form.hasVariations"]'),
      'unlimited quantity checkbox': this.by.css(':not(.ng-hide)[ng-show^="currentTab"] input[name="product_unlimited_quantity"]'),
      'accept orders when out of stock label': this.by.css('[ng-show*="currentTab"]:not(.ng-hide) [ng-if*="isOutOfStockOrderable"]'),
      'accept orders when out of stock checkbox': this.by.css('[ng-show*="currentTab"]:not(.ng-hide) input[name="product_out_of_stock_orderable"]'),
      'accept orders when out of stock question mark': this.by.css('[ng-show*="currentTab"]:not(.ng-hide) [target="faq-product-out-of-stock-order"]'),
      'accept orders when out of stock hint': this.by.css('[ng-show*="currentTab"]:not(.ng-hide) [ng-if*="isOutOfStockOrderable"] div.popover'),
      //variations
      'variations toggle': this.by.css('[id="productForm-variations"] div[ng-click="toggle()"]'),
      'add options field': this.by.css('input[placeholder="Add options"]'),
      'edit language button': this.by.css('[ng-click="editVariationLang()"]'),
      'add variation button': this.by.css('a[ng-click="addFieldTitle()"]'),
      'zh name field': this.by.css('input[name="product_name_zh-hant"]'),
      'regular price field': this.by.css('input[ng-model="product.price.dollars"]'),
      'sale price field': this.by.css('input[ng-model="product.price_sale.dollars"]'),
      'member price field': this.by.css('[name="product_member_price"]'),
      'member tier price field': this.by.css('[ng-model="productPriceTiers[tier._id].dollars"]'),
      'unlimited quantity checkbox': this.by.css(':not(.ng-hide)[ng-show^="currentTab"] input[name="product_unlimited_quantity"]'),
      'quantity field': this.by.css('input[name="product_quantity"]'),
      'sku field': this.by.css('[name="product_sku"]'),
      'add button': this.by.css('.product-submit-btn:not([data-loading]'),
      'update button': this.by.css('.product-submit-btn:not([data-loading]'),
      'alert': this.by.css('.alert:not(.ng-hide)'),
      'popup': this.by.css('.modal-dialog'),
      'row of english variation name field': this.by.css('[data-field-name="English"] input:not(.ng-hide)'),
      'variations same price checkbox': this.by.css('input[name="product_same_price"]'),
      'row of variation sale price field': this.by.css('input[ng-model="variation.price_sale.dollars"]'),
      'row of variation member price field': this.by.css('input[ng-model="variation.member_price.dollars"]'),
      'row of variation member tier price field': this.by.css('.variation-row .tier-price-field input'),
      'row of 1st variation member tier price field': this.by.css('.variation-row .tier-price-field:nth-child(5) input'),
      'row of variation price field': this.by.css('input[ng-model="variation.price.dollars"]'),
      'row of variation quantity field': this.by.css('input[ng-model="variation.quantity"]'),
      'row of variation list': this.by.css('div[ng-repeat="variation in variations track by variation.trackKey"]'),
      'row of variation sku field': this.by.css('[ng-model="variation.sku"]'),
      'row of variation same price field': this.by.css('div.variation-input-padding.ng-binding'),
      'variation confirm popover': this.by.css('div[class="dialogbox ng-scope"]'),
      'variation confirm button': this.by.css('button[class="btn btn-danger ladda-button ng-binding"]'),
      'remove row of variation tags': this.by.css('.tags .remove-button'),
      //Search Engine Optimization
      'SEO info tab': this.by.css('a[ng-click="changeEditLang(lang)"]'),
      'SEO title field': this.by.css('input[name="seo_title"]'),
      'SEO description field': this.by.css('textarea[name="seo_description"]'),
      'SEO friendly url field': this.by.css('input[name="link_url_link"]'),
      //Settings
      'row of variation weight field': this.by.css('[ng-model="variation.weight"]'),
      'row of variants checkbox': this.by.css('input[ng-model="variation.isSelected"]'),
      'tag field': this.by.xpath('//*[@id="productForm-settings"]/div[3]/div[2]/div/tags-input/div/div/input'),
      'remove tag button': this.by.css('[ng-model="productTags"] a[ng-click="$removeTag()"]'),
      'tag text': this.by.css('span[ng-bind="$getDisplayText()"]'),
      'row of excluded payment list': this.by.css('[ng-class="{\'selected-strikethrough\':isPaymentSelected(payment.key)}"]'),
      'row of excluded delivery list': this.by.css('[ng-class="{\'selected-strikethrough\':isDeliverySelected(delivery.key)}"]'),
      'excluded payment list': this.by.css('[uib-collapse="isSectionCollapsed.payment_options"]'),
      'excluded delivery list': this.by.css('[uib-collapse="isSectionCollapsed.delivery_options"]'),
      'excluded payment collapse': this.by.css('div[ng-click="isSectionCollapsed.payment_options = !isSectionCollapsed.payment_options"]'),
      'excluded delivery collapse': this.by.css('div[ng-click="isSectionCollapsed.delivery_options = !isSectionCollapsed.delivery_options"]'),
      'preorder product toggle': this.by.css('div[ng-model="product.is_preorder"]'),
      'preorder on button': this.by.css('button[ng-click="product.is_preorder = true"]'),
      'preorder note field': this.by.css('input[ng-model="product.preorder_note_translations[lang]"]'),
      'close popup button': this.by.css('span[title="Close"]'),
      'row of logs': this.by.css('li[ng-repeat="log in product_action_logs"]'),
      'view details link': this.by.css('[ng-click="showHideRows($index,true)"]'),
      'weight field': this.by.css('input[name="product_weight"]'),
      'faq button': this.by.css('span.ng-binding a[target="_blank"]'),
      'preset publish date field': this.by.css('input[name="schedule_publish_at"]'),
      'preset publish date button': this.by.css('span.input-group-addon.button'),
      'next month button': this.by.css('ul.datetime-picker-dropdown button.pull-right'),
      'date picker': this.by.css('ul.dropdown-menu.dropdown-menu-left.datetime-picker-dropdown.ng-pristine.ng-untouched.ng-valid.ng-scope.ng-valid-date-disabled'),
      'time picker': this.by.css('ul.dropdown-menu.dropdown-menu-left.datetime-picker-dropdown.ng-pristine.ng-untouched.ng-valid.ng-scope.ng-valid-time'),
      'increment hours button': this.by.css('a[ng-click="incrementHours()"]'),
      'meridian button': this.by.css('button[ng-click="toggleMeridian()"]'),
      'calendar table': this.by.css('.dropdown-menu.datetime-picker-dropdown'),
      'today button': this.by.css('span.btn-group.pull-left button[ng-click*="select"]'),
      'clear button': this.by.css('button[ng-click="select(null)"]'),
      'done button': this.by.css('button[ng-click="close()"]'),
      'breadcrumb': this.by.css('.page-heading h1 > span:not(.ng-hide):nth-child(5)'),
      'brand field': this.by.css('[ng-show^="currentTab=="]:not(.ng-hide) [ng-model="product.brand"]'),
      'mpn field': this.by.css('[ng-show^="currentTab=="]:not(.ng-hide) [ng-model="product.mpn"]'),
      'mpn field with variations': this.by.css('input[ng-model="variation.mpn"]'),
      'barcode field': this.by.css('[ng-show^="currentTab=="]:not(.ng-hide) [ng-model="product.gtin"]'),
      'barcode field with variations': this.by.css('input[ng-model="variation.gtin"]'),
      'row of log list': this.by.css('.product-log'),
      'add variant button': this.by.css('a[class="btn btn-default ng-binding"]'),
      'add variant popup': this.by.css('div[class="modal-content"]'),
      'variant english name field': this.by.css('input[class="form-control required ng-scope ng-pristine ng-untouched ng-invalid ng-invalid-required"]'),
      'ok button': this.by.css('.dialogbox .ladda-button:not(.ng-hide)'),
      'variation remove button': this.by.css('a[ng-click="removeSpecification(index)"]'),
      'remove popup': this.by.css('div[class="modal-content"]'),
      'variant remove button': this.by.css('a[ng-click="removeVariation($index)"]'),
      'tag options field': this.by.css('div[ng-class="{focused: hasFocus}"]'),
      'remove product tags': this.by.css('[ng-show*="settings"] .tags .remove-button'),
      'bulk delete button': this.by.css('[ng-click="bulkRemoveVariations()"]'),
      'strikethrough': this.by.css('label.font-weight-normal.ng-binding.selected-strikethrough'),
      'preset available time toggle': this.by.css('[ng-model="form.availableTimeEnabled"]'),
      'available start date field': this.by.css('[name="available_start_time"]'),
      'available end date field': this.by.css('[name="available_end_time"]'),
      'available start date calendar button': this.by.css('[ng-click="availableStartOpen($event)"]'),
      'available end date calendar button': this.by.css('[ng-click="!form.available_end_time_unlimited && availableEndOpen($event)"]'),
      'available date button': this.by.css('[ng-click="select(dt.date)"]:not([disabled])'),
      'never expires checkbox': this.by.css('[name="available_end_time_unlimited"]'),
      'decrement hours button': this.by.css('[ng-disabled="noDecrementHours()"]'),
      'variations label': this.by.css('.variantOptionForm label'),
      'customized shop variant selector checkbox': this.by.css('.variantOptionForm input[name="variant"]'),
      'edit image selector button': this.by.css('button[ng-click*="openImgUploader"]'),
      'row of variants': this.by.css('.modal-content div[ng-repeat="option in variantOptions"]'),
      'save variants products button': this.by.css('.ImageUploader-footer [ng-click="save()"]'),
      'cancel button': this.by.css('button[ng-click="cancel()"]'),
      'variants products selector': this.by.css('input[ng-file-select="imageUpload($files, $index)"]'),
      'variants products selector button': this.by.css('div[ng-click="triggerImgUploader($index)"]'),
      'image variants selector popup': this.by.css('.ImageUploader'),
      'image variants count content': this.by.css('.ImageUploader-footer .ImageUploader-footer-content'),
      'additional consumption tax area': this.by.css('div[ng-if="slFeatureService.hasFeature(\'taxes_settings\')"]'),
      'additional consumption tax toggle': this.by.css('.product-tax-title div.btn-sl-toggle'),
      'additional consumption tax toggle on': this.by.css('.product-tax-title div[aria-checked="true"]'),
      'additional consumption tax toggle off': this.by.css('.product-tax-title div[aria-checked="false"]'),
      'additional consumption tax label': this.by.css('a[ng-show="products_taxable"] .label.product-tax-toggle'),
      //One
      'popover': this.by.css('div.dialogbox'),
      'popover button': this.by.css('div.dialogbox button'),
      'out of stock warning alert': this.by.css('[ng-show*="currentTab"]:not(.ng-hide) div[ng-if="isShowOutOfStockOrderableWarning"]'),
    }
  }


  get samples() {

    return {
      'product photo': `${this.props.sample.sampleImagesPath()}/1.png`,
      'dateNow': this.props.sample.genDate(),
      'hourNow': `${this.props.sample.genPeriodHour(1)}:00`,
      'timeNow': this.props.sample.genTwelveHourPeriod(1),
      'timeNext': this.props.sample.genTwelveHourPeriod(1) == 'AM' ? 'PM' : 'AM',
      'white variants product photo': `${this.props.sample.sampleImagesPath()}/white.jpg`,
      'yellow variants product photo': `${this.props.sample.sampleImagesPath()}/4.jpg`,
      'add ten quantity': parseInt(`${this.getVariable('origin quantity')}`.replace(/[^0-9]/g))-10,
    }

  }
}

module.exports = ProductEditPage
