let Page = require('../../framework/models/Page.js')

class BroadcastCenterCreatePage extends Page {

  get elements() {
    return {
      'id': this.by.css('#broadcast_form'),
      'language dropdown': this.by.css('[class*="navbar-collapse"] li[class="dropdown"]:nth-child(1)'),
      'language dropdown option': this.by.css('[aria-labelledby="menu-languages"] a'),
      'title field': this.by.css('input[name="broadcast_title"]'),
      'content field': this.by.css('textarea[name="broadcast_body"]'),
      'html content field': this.by.css('.cke_editable'),
      'row of html content field': this.by.css('.cke_editable p'),
      'tab': this.by.css('li[ng-repeat^="tab"] a'),
      'tabs content': this.by.css('div[id="FormTabsContent"]'),
      'filter dropdown': this.by.css('.filter-label'),
      'filter type dropdown': this.by.css('[options="segmentTypeOptions"]'),
      'filter type dropdown option': this.by.css('[options="segmentTypeOptions"] a.sb-item-handle'),
      'value dropdown': this.by.css('[options="segmentOperatorOptions"]'),
      'value dropdown option': this.by.css('[options="segmentOperatorOptions"] a'),
      'value selectbox dropdown': this.by.css('selectbox[options="segmentOperatorValueOptions"]'),
      'value selectbox dropdown option': this.by.css('selectbox[options="segmentOperatorValueOptions"] a'),
      'value field': this.by.css('input[ng-model="state.filter.segmentOperatorValue"]'),
      'add filter button': this.by.css('[ng-click="addFilter()"]'),
      'selected filter': this.by.css('.label-apply'),
      'filter result': this.by.css('h4'),
      'send button': this.by.css('button[type="submit"]'),
      'cancel button': this.by.css('a[class="btn btn-default ng-binding"]'),
      'delete filter button': this.by.css('[ng-click="clearFilter(advancedFilterLabel)"]'),
      'alert': this.by.css('.alert'),
      'error message': this.by.css('p.help-block:not(.ng-hide)'),
      'words limit': this.by.css('span.help-block'),
      'send immediately checkbox': this.by.css('.radio label [value="now"]'),
      'preset time checkbox': this.by.css('.radio label [value="schedule"]'),
      'preset time field': this.by.css('input[type="datetime"]'),
      'datetime picker button': this.by.css('span[ng-click="dateTimePickerDidClick($event)"]'),
      'date picker button': this.by.css('[ng-click="openDatepicker()"]'),
      'datetime picker': this.by.css('ul[ng-change="dateSelection(date)"]'),
      'row of datetime picker date': this.by.css('ul[ng-change="dateSelection(date)"] td button:not([disabled])'),
      'incrementHours hours button': this.by.css('a[ng-click="incrementHours()"]'),
      'datetime picker done button': this.by.css('button[ng-click="close()"]'),
      'today button': this.by.css("button[ng-click=\"select('today')\"]"),
      'now time button': this.by.css("button[ng-click=\"select('now')\"]"),
      'email html editor': this.by.css('#cke_emailEditor'),
      'editor frame': this.by.css('.cke_panel_frame'),
      'font style dropdown': this.by.css('a#cke_10'),
      'font style dropdown option': this.by.css('a.cke_menubutton'),
      'font style dropdown Bold option': this.by.css('#cke_300'),
      'font style dropdown Italic option': this.by.css('#cke_301'),
      'font style dropdown Underline option': this.by.css('#cke_302'),
      'bold font': this.by.css('#cke_emailEditor p strong'),
      'italic font': this.by.css('#cke_emailEditor p em'),
      'underline font': this.by.css('#cke_emailEditor p u'),
      'size font': this.by.css('#cke_emailEditor [style="font-size:10px;"]'),
      'font size dropdown': this.by.css('.cke_combo_inlinelabel'),
      'font size dropdown option': this.by.css('.cke_panel_listItem a'),
      'font size ten dropdown option': this.by.css('#cke_36 a'),
      'popover':this.by.css('.dialogbox'),
      'add image button': this.by.css('.cke_button__addimage'),
      'view html button': this.by.css('.ckeditor-menu-tooltip.fa-code'),
      'photo selector': this.by.css('input[id="main_media"]'),
      'ok button':this.by.css('button[ng-click="save()"]'),
      'uploaded image': this.by.css('#cke_emailEditor img'),
      'popover uploaded image': this.by.css('.modal-dialog img[src^="https://img.shoplineapp.com/media/image_clips/"]'),
      'link button':this.by.css('i[class$="fa-link data-toggle="]'),
      'link field':this.by.css('input[type="link"]'),
      'uploaded link':this.by.css('a[data-cke-saved-href^="https://"]'),

      'User Menu': this.by.css('[id="menu-user"]'),
      'Logout': this.by.css('a[ng-click="signout()"]'),
      'price field': this.by.css('input[type="number"]'),
      'credits field': this.by.css('input[ng-model="state.filter.segmentOperatorValue"]'),
      'value selectbox dropdown': this.by.css('selectbox[options="segmentOperatorValueOptions"]'),
      'value selectbox dropdown option': this.by.css('selectbox[options="segmentOperatorValueOptions"] a'),

      //template
      'broadcast name limit': this.by.css('.word-count-block'),
      'message type button': this.by.css('button[ng-click="handleMessageAdd(messageTypeButton.type)"]'),
      'empty template block': this.by.css('[ng-if="editorTemplates.length === 0"]'),
      'text field': this.by.css('textarea[ng-model="template.payload.text"]'),
      'text limit': this.by.css('div.word-count-block'),
      'card block': this.by.css('[ng-if="template.templateStructureType === \'CARD\'"]'),
      'card message field': this.by.css('[ng-model="template.payload.title"]'),
      'card description field': this.by.css('[ng-model="template.payload.content"]'),
      'card button': this.by.css('[type="button"]:nth-child(3)'),
      'field of words count': this.by.css('.text-input-container .word-count-block'), 
      'add a button': this.by.css('button[ng-click="openFlexButtonModel(template)"]'),
      'add button popover': this.by.css('[id="line-add-button-modal"]'),
      'button title field': this.by.css('[name="buttonTitle"]'),
      'button url field': this.by.css('[name="buttonUrl"]'),
      'button text limit': this.by.css('[name="lineAddButtonForm"] .word-count-block'),
      'button of add button': this.by.css('[ng-click="openFlexButtonModel(template)"]'),
      'button title words count': this.by.css('[class="input-wrapper"] div[class="word-count-block"]'),
      'button alert': this.by.css('[role="alert"]'),
      'image block': this.by.css('[ng-if="template.templateStructureType === \'IMAGE\'"]'),
      'image selector': this.by.css('input[id="file-upload-input"]'),
      'upload image': this.by.css('.image-input'),
      'number of messages': this.by.css('.footer'),
      'save button': this.by.css('button[type="submit"]:not(.ladda-button)'),
      'card url button': this.by.css('[ng-repeat="button in template.payload.buttons"]'),
      'add photo button': this.by.css('button[ng-click="openFile()"]'),
      'change image block': this.by.css('.image-hover'),
      'row of swap up button': this.by.css('[ng-click="handleReIndexClick(template, -1)"]'),
      'row of swap down button': this.by.css('[ng-click="handleReIndexClick(template, 1)"]'),
      'row of delete template button': this.by.css('[ng-click="removeTemplate(template)"]'),
   }
  }

  get samples() {

    return {
      'Email title': 'test EMAIL message title',
      'Email content': 'test EMAIL message content',
      'FB title': 'test FB message title',
      'FB content': 'test FB message content',
      'SMS title': 'test SMS message title',
      'SMS content': 'test SMS message content',
      'LINE title': 'test LINE@ message title',
      'LINE content': 'test LINE@ message content',
      'broadcast image': `${this.props.sample.sampleImagesPath()}/3.jpg`,
      'broadcast edit image': `${this.props.sample.sampleImagesPath()}/4.jpg`,
      'test image': `${this.props.sample.sampleImagesPath()}/white.jpg`,
      'html code': `<a href="${this.props.sample.genShopURL(this.props.account.handle)}" target="_blank"><img src="https://pos.shopline.tw/wp-content/uploads/2019/07/shopline-pos.png"/></a>`,
      'more than 20 character': '!@#$%^&*(w1 ,123456789',
      'preset time': `${this.props.sample.genDate()} ${this.props.sample.genHour(1)%12<10&this.props.sample.genHour(1)%12>0?'0':''}${this.props.sample.genHour(1)%12?this.props.sample.genHour(1)%12:12}:00`,
      'shop URL': `${this.props.sample.genShopURL(this.props.account.handle)}`,
      'more than 80 character': '!@#$%^&*()_+~=12345678901234567890123456789012345678901234567890123456789012345678901',
      'shop URL with utm': `${this.props.sample.genShopURL(this.props.account.handle)}?utm_source=google&utm_content=test`,
    }

  }

}
module.exports = BroadcastCenterCreatePage